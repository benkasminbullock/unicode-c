This is a Unicode library in the programming language C which deals
with conversions to and from the UTF-8 format. 

* Author: 

Ben Bullock <benkasminbullock@gmail.com>, <bkb@cpan.org>

* Repository: 

    https://github.com/benkasminbullock/unicode-c

* Licence: 

You can use this C code under the BSD three-clause licence, the GNU
General Public Licence, either version 2 or later, or the Perl
artistic licence.

* Version:

There is no version for this, please use the git commit numbers.

* Installation:

Building from scratch requires cfunctions:

    https://github.com/benkasminbullock/cfunctions

Alternatively, copy the header file from one of these Perl
distributions:

    https://metacpan.org/release/JSON-Create
    https://metacpan.org/release/JSON-Parse

The header file is under "Browse" then "unicode.h". I don't provide
direct links here since these may be updated for different versions.

* Documentation:

Documentation consists of the comments in the source code. 

These comments can be converted into an mdoc-format manual page called
"unicode.3", or an HTML page called "unicode.html" using scripts in
the "doc" subdirectory of the repository. Running these scripts may
require you to install some Perl modules from CPAN.

* Conventions

All the functions return values of type int32_t (32-bit signed
integers). All of the UTF-8 inputs are of the type "unsigned char".

* Testing:

Compile with -DTEST or use "make test" to run the tests. The tests are
contained in "unicode.c" itself. Please refer to the source
code. Running the tests requires the "prove" utility which is part of
Perl. It requires the file "c-tap-test.h" which may be obtained at

   https://www.lemoda.net/c/simple-tap-test/index.html

It also requires editing the file "Makefile".

* Dependencies

This C code uses the definitions from the standard header file
"stdint.h" to get consistent integer types.

* Bugs:

Either send email or use the github "issues" pages to report bugs.

* Known problems:

** The library uses UCS2 where it should have said UTF-16. There are a
   few similar misnamings.

** 0xFF is regarded as a valid UTF-8 first byte by some routines.

* Online version

There is an online web version of this software here:

    http://www.lemoda.net/tools/uniconvert/index.html
